version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - city_brain_net

  # Airflow
  airflow:
    image: apache/airflow:3.0.0-python3.9
    container_name: airflow
    depends_on:
      - postgres
    environment:
      - TZ=Asia/Shanghai
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow%401313123@postgres/airflow
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - DATAX_PATH=C:/Users/Administrator/code/CityBrain/data/datax
    volumes:
      - //var/run/docker.sock:/var/run/docker.sock # 允许 Airflow 访问 Windows 的 Docker 守护进程
      - ./data/airflow/dags:/opt/airflow/dags
      - ./logs/airflow:/opt/airflow/logs
      - ./data/airflow/simple_auth_manager_passwords.json.generated:/opt/airflow/simple_auth_manager_passwords.json.generated
    ports:
      - "8082:8080"
    command: bash -c "airflow db migrate && airflow standalone"
    networks:
      - city_brain_net

  # 数据库
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - TZ=Asia/Shanghai
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=12345HTW
      - POSTGRES_DB=city_brain
    volumes:
      - ./data/postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5555:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin && PGPASSWORD=12345HTW psql -U admin -d city_brain -c 'SELECT 1'" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - city_brain_net

  # MongoDB (非结构化数据源)
  mongo-keyfile:
    image: mongo:4.2.8
    volumes:
      - ./data/mongo_keyfile:/opt/keyfile
    command: bash -c "openssl rand -base64 756 > /opt/keyfile/mongodb-keyfile && chmod 400 /opt/keyfile/mongodb-keyfile && chown 999:999 /opt/keyfile/mongodb-keyfile && echo 'KeyFile生成完成'"
    networks:
      - city_brain_net

  # 副本集节点1
  mongo1:
    image: mongo:4.2.8
    container_name: mongo1
    depends_on:
      - mongo-keyfile
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    volumes:
      - ./data/mongo1_data:/data/db
      - ./data/mongo_keyfile:/opt/keyfile:ro
    command: mongod --replSet rs0 --keyFile /opt/keyfile/mongodb-keyfile --bind_ip_all
    networks:
      - city_brain_net

  # 副本集节点2
  mongo2:
    image: mongo:4.2.8
    container_name: mongo2
    depends_on:
      - mongo-keyfile
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    volumes:
      - ./data/mongo2_data:/data/db
      - ./data/mongo_keyfile:/opt/keyfile:ro
    command: mongod --replSet rs0 --keyFile /opt/keyfile/mongodb-keyfile --bind_ip_all
    networks:
      - city_brain_net

  # 副本集节点3
  mongo3:
    image: mongo:4.2.8
    container_name: mongo3
    depends_on:
      - mongo-keyfile
    ports:
      - "27019:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    volumes:
      - ./data/mongo3_data:/data/db
      - ./data/mongo_keyfile:/opt/keyfile:ro
    command: mongod --replSet rs0 --keyFile /opt/keyfile/mongodb-keyfile --bind_ip_all
    networks:
      - city_brain_net

  # 初始化副本集
  mongo-setup:
    image: mongo:4.2.8
    container_name: mongo-setup
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    volumes:
      - ./scripts:/scripts
    entrypoint: [ "bash", "/scripts/setup-replica.sh" ]
    restart: "no"
    networks:
      - city_brain_net

networks:
  city_brain_net:
    driver: bridge
